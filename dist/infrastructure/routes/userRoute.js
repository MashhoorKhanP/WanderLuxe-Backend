"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const bcryptPassword_1 = __importDefault(require("../services/bcryptPassword"));
const generateToken_1 = __importDefault(require("../services/generateToken"));
const userRepository_1 = __importDefault(require("../repositories/userRepository"));
const userUseCase_1 = __importDefault(require("../../useCases/userUseCase"));
const userController_1 = __importDefault(require("../../adapter/controllers/userController"));
const generateOtp_1 = __importDefault(require("../services/generateOtp"));
const sendMail_1 = __importDefault(require("../services/sendMail"));
const auth_1 = __importDefault(require("../middlewares/auth"));
const hotelController_1 = __importDefault(require("../../adapter/controllers/hotelController"));
const hotelRepository_1 = __importDefault(require("../repositories/hotelRepository"));
const hotelUseCase_1 = __importDefault(require("../../useCases/hotelUseCase"));
const roomRepository_1 = __importDefault(require("../repositories/roomRepository"));
const roomUseCase_1 = __importDefault(require("../../useCases/roomUseCase"));
const roomController_1 = __importDefault(require("../../adapter/controllers/roomController"));
const couponRepository_1 = __importDefault(require("../repositories/couponRepository"));
const couponUseCase_1 = __importDefault(require("../../useCases/couponUseCase"));
const couponController_1 = __importDefault(require("../../adapter/controllers/couponController"));
const stripe_1 = __importDefault(require("../services/stripe"));
const bookingUseCase_1 = __importDefault(require("../../useCases/bookingUseCase"));
const bookingRepository_1 = __importDefault(require("../repositories/bookingRepository"));
const bookingController_1 = __importDefault(require("../../adapter/controllers/bookingController"));
const socket_1 = require("../services/socket");
const http_1 = __importDefault(require("http"));
const conversationRepository_1 = __importDefault(require("../repositories/conversationRepository"));
const chatUseCase_1 = __importDefault(require("../../useCases/chatUseCase"));
const messageRepository_1 = __importDefault(require("../repositories/messageRepository"));
const adminRepository_1 = __importDefault(require("../repositories/adminRepository"));
const bannerRepository_1 = __importDefault(require("../repositories/bannerRepository"));
const bannerUseCase_1 = __importDefault(require("../../useCases/bannerUseCase"));
const bannerController_1 = __importDefault(require("../../adapter/controllers/bannerController"));
const encrypt = new bcryptPassword_1.default();
const jwt = new generateToken_1.default();
const otp = new generateOtp_1.default();
const email = new sendMail_1.default();
const userRepository = new userRepository_1.default();
const hotelRepository = new hotelRepository_1.default();
const roomRepository = new roomRepository_1.default();
const couponRepository = new couponRepository_1.default();
const paymentRepository = new stripe_1.default();
const bookingRepository = new bookingRepository_1.default();
const adminRepository = new adminRepository_1.default();
const conversationRepository = new conversationRepository_1.default();
const messageRepository = new messageRepository_1.default();
const bannerRepository = new bannerRepository_1.default();
const server = http_1.default.createServer((0, express_1.default)()); // Create an HTTP server instance
const socket = new socket_1.SocketManager(server, userRepository);
const hotelCase = new hotelUseCase_1.default(hotelRepository);
const bannerCase = new bannerUseCase_1.default(bannerRepository);
const roomCase = new roomUseCase_1.default(roomRepository);
const couponCase = new couponUseCase_1.default(couponRepository);
const userCase = new userUseCase_1.default(userRepository, encrypt, jwt, paymentRepository);
const bookingCase = new bookingUseCase_1.default(bookingRepository, paymentRepository, roomRepository, couponRepository, userRepository);
const conversationCase = new chatUseCase_1.default(conversationRepository, messageRepository, userRepository, adminRepository);
const userController = new userController_1.default(userCase, email, otp, socket, conversationCase);
const hotelController = new hotelController_1.default(hotelCase);
const roomController = new roomController_1.default(roomCase);
const couponController = new couponController_1.default(couponCase);
const bookingController = new bookingController_1.default(bookingCase);
const bannerController = new bannerController_1.default(bannerCase);
const router = express_1.default.Router();
router.post("/signup", (req, res) => userController.signUp(req, res));
router.post("/google-signup", (req, res) => userController.googleSignUp(req, res));
router.post("/verify-otp", (req, res) => userController.userVerification(req, res));
router.post("/resend-otp", (req, res) => userController.resendOtp(req, res));
router.post("/login", (req, res) => userController.login(req, res));
router.patch("/profile/:userId", auth_1.default, (req, res) => userController.updateProfile(req, res));
router.get("/find-banners", (req, res) => bannerController.getBanners(req, res));
router.get("/find-hotels", (req, res) => hotelController.getHotels(req, res));
router.get("/find-rooms", (req, res) => roomController.getRooms(req, res));
router.get("/find-coupons", (req, res) => couponController.getCoupons(req, res));
router.get("/find-bookings", (req, res) => bookingController.getBookings(req, res));
router.get("/my-bookings/:userId", (req, res) => bookingController.getUserBookings(req, res));
router.get("/hotel-bookings/:hotelId", (req, res) => bookingController.getHotelBookings(req, res));
router.patch("/my-bookings/cancel-booking/:bookingId", (req, res) => bookingController.updateBooking(req, res));
router.patch("/add-remove/wishlist", auth_1.default, (req, res) => userController.addRemoveFromWishlist(req, res));
router.patch("/change-password", auth_1.default, (req, res) => userController.updatePassword(req, res));
router.post("/forgot-password", (req, res) => userController.forgotPassword(req, res));
//payment
router.post("/wallet-payment", (req, res) => bookingController.walletPayment(req, res));
router.post("/payment", (req, res) => bookingController.payment(req, res));
router.post("/webhook", (req, res) => bookingController.webhook(req, res));
router.post("/add-money-to-wallet", (req, res) => userController.addMoneyToWallet(req, res));
router.post("/wallet/webhook", (req, res) => userController.walletWebhook(req, res));
router.get("/updated-user/:userId", (req, res) => userController.getUpdatedUser(req, res));
//chat
router.post("/conversation", (req, res) => userController.newConversation(req, res));
router.get("/get-conversations/:userId", (req, res) => userController.getConversations(req, res));
router.post("/add-message", (req, res) => userController.addMessage(req, res));
router.get("/get-message/:conversationId", (req, res) => userController.getMessages(req, res));
exports.default = router;
