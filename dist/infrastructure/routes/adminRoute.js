"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const bcryptPassword_1 = __importDefault(require("../services/bcryptPassword"));
const generateToken_1 = __importDefault(require("../services/generateToken"));
const adminRepository_1 = __importDefault(require("../repositories/adminRepository"));
const userRepository_1 = __importDefault(require("../repositories/userRepository"));
const adminUseCase_1 = __importDefault(require("../../useCases/adminUseCase"));
const adminController_1 = __importDefault(require("../../adapter/controllers/adminController"));
const adminAuth_1 = __importDefault(require("../middlewares/adminAuth"));
const hotelRepository_1 = __importDefault(require("../repositories/hotelRepository"));
const hotelUseCase_1 = __importDefault(require("../../useCases/hotelUseCase"));
const hotelController_1 = __importDefault(require("../../adapter/controllers/hotelController"));
const roomRepository_1 = __importDefault(require("../repositories/roomRepository"));
const roomUseCase_1 = __importDefault(require("../../useCases/roomUseCase"));
const roomController_1 = __importDefault(require("../../adapter/controllers/roomController"));
const couponRepository_1 = __importDefault(require("../repositories/couponRepository"));
const couponUseCase_1 = __importDefault(require("../../useCases/couponUseCase"));
const couponController_1 = __importDefault(require("../../adapter/controllers/couponController"));
const bookingRepository_1 = __importDefault(require("../repositories/bookingRepository"));
const bookingUseCase_1 = __importDefault(require("../../useCases/bookingUseCase"));
const bookingController_1 = __importDefault(require("../../adapter/controllers/bookingController"));
const stripe_1 = __importDefault(require("../services/stripe"));
const conversationRepository_1 = __importDefault(require("../repositories/conversationRepository"));
const chatUseCase_1 = __importDefault(require("../../useCases/chatUseCase"));
const messageRepository_1 = __importDefault(require("../repositories/messageRepository"));
const bannerRepository_1 = __importDefault(require("../repositories/bannerRepository"));
const bannerUseCase_1 = __importDefault(require("../../useCases/bannerUseCase"));
const bannerController_1 = __importDefault(require("../../adapter/controllers/bannerController"));
const encrypt = new bcryptPassword_1.default();
const jwt = new generateToken_1.default();
const adminRepository = new adminRepository_1.default();
const userRepository = new userRepository_1.default();
const hotelRepository = new hotelRepository_1.default();
const roomRepository = new roomRepository_1.default();
const couponRepository = new couponRepository_1.default();
const bookingRepository = new bookingRepository_1.default();
const bannerRepository = new bannerRepository_1.default();
const adminCase = new adminUseCase_1.default(adminRepository, userRepository, encrypt, jwt);
const hotelCase = new hotelUseCase_1.default(hotelRepository);
const roomCase = new roomUseCase_1.default(roomRepository);
const couponCase = new couponUseCase_1.default(couponRepository);
const paymentRepository = new stripe_1.default();
const conversationRepository = new conversationRepository_1.default();
const messageRepository = new messageRepository_1.default();
const conversationCase = new chatUseCase_1.default(conversationRepository, messageRepository, userRepository, adminRepository);
const bookingCase = new bookingUseCase_1.default(bookingRepository, paymentRepository, roomRepository, couponRepository, userRepository);
const bannerCase = new bannerUseCase_1.default(bannerRepository);
const adminController = new adminController_1.default(adminCase, conversationCase);
const hotelController = new hotelController_1.default(hotelCase);
const roomController = new roomController_1.default(roomCase);
const couponController = new couponController_1.default(couponCase);
const bookingController = new bookingController_1.default(bookingCase);
const bannerController = new bannerController_1.default(bannerCase);
const router = express_1.default.Router();
router.post("/login", (req, res) => adminController.login(req, res));
router.get("/users", adminAuth_1.default, (req, res) => adminController.getUsers(req, res));
router.patch("/users/update-user/:userId", adminAuth_1.default, (req, res) => adminController.updateUsers(req, res));
router.post("/hotels/add-hotel", adminAuth_1.default, (req, res) => hotelController.addHotel(req, res));
router.delete("/hotels/delete-hotel/:hotelId", adminAuth_1.default, (req, res) => hotelController.deleteHotel(req, res));
router.patch("/hotels/update-hotel/:hotelId", adminAuth_1.default, (req, res) => hotelController.updateHotel(req, res));
router.post("/rooms/add-room", adminAuth_1.default, (req, res) => roomController.addRoom(req, res));
router.delete("/rooms/delete-room/:roomId", adminAuth_1.default, (req, res) => roomController.deleteRoom(req, res));
router.patch("/rooms/update-room/:roomId", adminAuth_1.default, (req, res) => roomController.updateRoom(req, res));
router.post("/coupons/add-coupon", adminAuth_1.default, (req, res) => couponController.addCoupon(req, res));
router.patch("/coupons/update-coupon/:couponId", adminAuth_1.default, (req, res) => couponController.updateCoupon(req, res));
router.delete("/coupons/delete-coupon/:couponId", adminAuth_1.default, (req, res) => couponController.deleteCoupon(req, res));
router.patch("/bookings/update-booking/:bookingId", adminAuth_1.default, (req, res) => bookingController.updateBooking(req, res));
router.patch("/banners/update-banners/:bannerId", adminAuth_1.default, (req, res) => bannerController.updateBanners(req, res));
//chat
router.post("/conversation", (req, res) => adminController.newConversation(req, res));
router.get("/get-conversations/:conversationId", (req, res) => adminController.getConversations(req, res));
router.post("/add-message", (req, res) => adminController.addMessage(req, res));
router.get("/get-message/:conversationId", (req, res) => adminController.getMessages(req, res));
exports.default = router;
